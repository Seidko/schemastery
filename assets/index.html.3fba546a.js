import{_ as l,o,c as p,a as s,b as n,d as e,e as t,r as c}from"./app.7d616349.js";const r={},B=s("h1",{id:"schemastery",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#schemastery","aria-hidden":"true"},"#"),e(" Schemastery")],-1),y={href:"https://codecov.io/gh/shigma/schemastery",target:"_blank",rel:"noopener noreferrer"},i=s("img",{src:"https://img.shields.io/codecov/c/github/shigma/schemastery?style=flat-square",alt:"Codecov"},null,-1),F={href:"https://www.npmjs.com/package/schemastery",target:"_blank",rel:"noopener noreferrer"},A=s("img",{src:"https://img.shields.io/npm/dm/schemastery?style=flat-square",alt:"downloads"},null,-1),d={href:"https://www.npmjs.com/package/schemastery",target:"_blank",rel:"noopener noreferrer"},h=s("img",{src:"https://img.shields.io/npm/v/schemastery?style=flat-square",alt:"npm"},null,-1),E={href:"https://github.com/shigma/schemastery/blob/master/LICENSE",target:"_blank",rel:"noopener noreferrer"},u=s("img",{src:"https://img.shields.io/github/license/shigma/schemastery?style=flat-square",alt:"GitHub"},null,-1),m=t(`<p>Type Driven Schema Validator.</p><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features" aria-hidden="true">#</a> Features</h2><ul><li><strong>Lightweight.</strong> Much smaller than other validation libraries.</li><li><strong>Easy to use.</strong> You can use any schema as a function or constructor directly.</li><li><strong>Powerful.</strong> Schemastery supports some advanced types such as <code>union</code>, <code>intersect</code> and <code>transform</code>.</li><li><strong>Extensible.</strong> You can create your own schema types via <code>Schema.extend()</code>.</li><li><strong>Serializable.</strong> Schema objects can be serialized into JSON and then be hydrated in another environment.</li></ul><h2 id="basic-examples" tabindex="-1"><a class="header-anchor" href="#basic-examples" aria-hidden="true">#</a> Basic Examples</h2><h3 id="use-as-validator-javascript" tabindex="-1"><a class="header-anchor" href="#use-as-validator-javascript" aria-hidden="true">#</a> use as validator (JavaScript)</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;schemastery&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">number</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)     </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">// 10</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">)    </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"></span></code></pre></div><h3 id="use-as-constructor-typescript" tabindex="-1"><a class="header-anchor" href="#use-as-constructor-typescript" aria-hidden="true">#</a> use as constructor (TypeScript)</h3><div class="language-typescript ext-ts"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Schema</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;schemastery&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Config</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Record</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Config</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">object</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dict</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">string</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">({}),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">array</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">string</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">([]),</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// config is an instance of Config</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// in this case, that is { foo: {}, bar: [] }</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Config</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span></code></pre></div><h2 id="general-types" tabindex="-1"><a class="header-anchor" href="#general-types" aria-hidden="true">#</a> General Types</h2><h3 id="schema-any" tabindex="-1"><a class="header-anchor" href="#schema-any" aria-hidden="true">#</a> Schema.any()</h3><p>Assert that the value is of any type.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">any</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">()            </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)           </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">({})          </span><span style="color:#7F848E;font-style:italic;">// {}</span></span>
<span class="line"></span></code></pre></div><h3 id="schema-never" tabindex="-1"><a class="header-anchor" href="#schema-never" aria-hidden="true">#</a> Schema.never()</h3><p>Assert that the value is nullable.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">never</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">()            </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)           </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">({})          </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"></span></code></pre></div><h3 id="schema-const-value" tabindex="-1"><a class="header-anchor" href="#schema-const-value" aria-hidden="true">#</a> Schema.const(value)</h3><p>Assert that the value is equal to the given constant.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">const</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)          </span><span style="color:#7F848E;font-style:italic;">// 10</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)           </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"></span></code></pre></div><h3 id="schema-number" tabindex="-1"><a class="header-anchor" href="#schema-number" aria-hidden="true">#</a> Schema.number()</h3><p>Assert that the value is a number.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">number</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">()            </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)           </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">)          </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"></span></code></pre></div><h3 id="schema-string" tabindex="-1"><a class="header-anchor" href="#schema-string" aria-hidden="true">#</a> Schema.string()</h3><p>Assert that the value is a string.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">string</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">()            </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)           </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">)       </span><span style="color:#7F848E;font-style:italic;">// &#39;foo&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="schema-boolean" tabindex="-1"><a class="header-anchor" href="#schema-boolean" aria-hidden="true">#</a> Schema.boolean()</h3><p>Assert that the value is a boolean.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">boolean</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">()            </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)           </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)        </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="schema-is-constructor" tabindex="-1"><a class="header-anchor" href="#schema-is-constructor" aria-hidden="true">#</a> Schema.is(constructor)</h3><p>Assert that the value is an instance of the given constructor.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">RegExp</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">()            </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/foo/</span><span style="color:#ABB2BF;">)       </span><span style="color:#7F848E;font-style:italic;">// /foo/</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">)       </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"></span></code></pre></div><h3 id="schema-array-inner" tabindex="-1"><a class="header-anchor" href="#schema-array-inner" aria-hidden="true">#</a> Schema.array(inner)</h3><p>Assert that the value is an array of <code>inner</code>. The default value will be <code>[]</code> if not specified.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">array</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">number</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">()                  </span><span style="color:#7F848E;font-style:italic;">// []</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)                 </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">])            </span><span style="color:#7F848E;font-style:italic;">// [0, 1]</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;">])          </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"></span></code></pre></div><h3 id="schema-dict-inner" tabindex="-1"><a class="header-anchor" href="#schema-dict-inner" aria-hidden="true">#</a> Schema.dict(inner)</h3><p>Assert that the value is a dictionary of <code>inner</code>. The default value will be <code>{}</code> if not specified.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dict</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">number</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">()                  </span><span style="color:#7F848E;font-style:italic;">// {}</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)                 </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> })    </span><span style="color:#7F848E;font-style:italic;">// { a: 0, b: 1 }</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;"> })  </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"></span></code></pre></div><h3 id="schema-tuple-list" tabindex="-1"><a class="header-anchor" href="#schema-tuple-list" aria-hidden="true">#</a> Schema.tuple(list)</h3><p>Assert that the value is a tuple whose each element is of corresponding subtype. The default value will be <code>[]</code> if not specified.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tuple</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">number</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">string</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">()                  </span><span style="color:#7F848E;font-style:italic;">// []</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">])               </span><span style="color:#7F848E;font-style:italic;">// { a: 0 }</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">])            </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;">])          </span><span style="color:#7F848E;font-style:italic;">// [0, &#39;1&#39;]</span></span>
<span class="line"></span></code></pre></div><h3 id="schema-object-dict" tabindex="-1"><a class="header-anchor" href="#schema-object-dict" aria-hidden="true">#</a> Schema.object(dict)</h3><p>Assert that the value is an object whose each property is of corresponding subtype. The default value will be <code>{}</code> if not specified.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">object</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">number</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">string</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">()                  </span><span style="color:#7F848E;font-style:italic;">// {}</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> })          </span><span style="color:#7F848E;font-style:italic;">// { a: 0 }</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> })    </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;"> })  </span><span style="color:#7F848E;font-style:italic;">// { a: 0, b: &#39;1&#39; }</span></span>
<span class="line"></span></code></pre></div><h3 id="schema-union-list" tabindex="-1"><a class="header-anchor" href="#schema-union-list" aria-hidden="true">#</a> Schema.union(list)</h3><p>Assert that the value is one of the specified types.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">union</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">number</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">string</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">()                  </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)                 </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;">)               </span><span style="color:#7F848E;font-style:italic;">// &#39;1&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)              </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"></span></code></pre></div><h3 id="schema-intersect-list" tabindex="-1"><a class="header-anchor" href="#schema-intersect-list" aria-hidden="true">#</a> Schema.intersect(list)</h3><p>Assert that the value should match each specified type.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">intersect</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">object</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">string</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">required</span><span style="color:#ABB2BF;">() }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">object</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">number</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) }),</span></span>
<span class="line"><span style="color:#ABB2BF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">()                  </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;"> })         </span><span style="color:#7F848E;font-style:italic;">// { a: &#39;&#39;, b: 0 }</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> })   </span><span style="color:#7F848E;font-style:italic;">// { a: &#39;&#39;, b: 1 }</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;2&#39;</span><span style="color:#ABB2BF;"> }) </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"></span></code></pre></div><h3 id="schema-transform-inner-callback" tabindex="-1"><a class="header-anchor" href="#schema-transform-inner-callback" aria-hidden="true">#</a> Schema.transform(inner, callback)</h3><p>Assert that the value is of the specified subtype and then transformed by <code>callback</code>.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">validate</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">number</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">()                  </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;0&#39;</span><span style="color:#ABB2BF;">)               </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)                </span><span style="color:#7F848E;font-style:italic;">// 11</span></span>
<span class="line"></span></code></pre></div><h2 id="instance-methods" tabindex="-1"><a class="header-anchor" href="#instance-methods" aria-hidden="true">#</a> Instance Methods</h2><h3 id="schema-required" tabindex="-1"><a class="header-anchor" href="#schema-required" aria-hidden="true">#</a> schema.required()</h3><p>Assert that the value is not nullable.</p><h3 id="schema-default-value" tabindex="-1"><a class="header-anchor" href="#schema-default-value" aria-hidden="true">#</a> schema.default(value)</h3><p>Set the fallback value when nullable.</p><h3 id="schema-description-text" tabindex="-1"><a class="header-anchor" href="#schema-description-text" aria-hidden="true">#</a> schema.description(text)</h3><p>Set the description of the schema.</p><h2 id="shorthand-syntax" tabindex="-1"><a class="header-anchor" href="#shorthand-syntax" aria-hidden="true">#</a> Shorthand Syntax</h2><p>Some shorthand syntax is available for inner types.</p><ul><li><code>undefined</code> -&gt; <code>Schema.any()</code></li><li><code>String</code> -&gt; <code>Schema.string()</code></li><li><code>Number</code> -&gt; <code>Schema.number()</code></li><li><code>Boolean</code> -&gt; <code>Schema.boolean()</code></li><li><code>1</code> -&gt; <code>Schema.const(1)</code> (only for primitive types)</li><li><code>Date</code> -&gt; <code>Schema.is(Date)</code></li></ul><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">array</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">)        </span><span style="color:#7F848E;font-style:italic;">// Schema.array(Schema.string())</span></span>
<span class="line"><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dict</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">RegExp</span><span style="color:#ABB2BF;">)         </span><span style="color:#7F848E;font-style:italic;">// Schema.dict(Schema.is(RegExp))</span></span>
<span class="line"><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">union</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">])        </span><span style="color:#7F848E;font-style:italic;">// Schema.union([Schema.const(1), Schema.const(2)])</span></span>
<span class="line"></span></code></pre></div><p>You can also use <code>Schema.from()</code> to get the inferred schema from a shorthand value.</p><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">()               </span><span style="color:#7F848E;font-style:italic;">// Schema.any()</span></span>
<span class="line"><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">)           </span><span style="color:#7F848E;font-style:italic;">// Schema.is(Date)</span></span>
<span class="line"><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">)          </span><span style="color:#7F848E;font-style:italic;">// Schema.const(&#39;foo&#39;)</span></span>
<span class="line"></span></code></pre></div><h2 id="advanced-examples" tabindex="-1"><a class="header-anchor" href="#advanced-examples" aria-hidden="true">#</a> Advanced Examples</h2><p>Here are some examples which demonstrate how to define advanced types.</p><h3 id="enumeration" tabindex="-1"><a class="header-anchor" href="#enumeration" aria-hidden="true">#</a> Enumeration</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Enum</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">union</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;red&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;blue&#39;</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">Enum</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;red&#39;</span><span style="color:#ABB2BF;">)                 </span><span style="color:#7F848E;font-style:italic;">// &#39;red&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">Enum</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;blue&#39;</span><span style="color:#ABB2BF;">)                </span><span style="color:#7F848E;font-style:italic;">// &#39;blue&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">Enum</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;green&#39;</span><span style="color:#ABB2BF;">)               </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"></span></code></pre></div><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> ToString</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ToString</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">any</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">ToString</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">)                </span><span style="color:#7F848E;font-style:italic;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">ToString</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)                 </span><span style="color:#7F848E;font-style:italic;">// &#39;0&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">ToString</span><span style="color:#ABB2BF;">({})                </span><span style="color:#7F848E;font-style:italic;">// &#39;{}&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="listable" tabindex="-1"><a class="header-anchor" href="#listable" aria-hidden="true">#</a> Listable</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Listable</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">union</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">array</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#ABB2BF;">]).</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">([])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">Listable</span><span style="color:#ABB2BF;">()                  </span><span style="color:#7F848E;font-style:italic;">// []</span></span>
<span class="line"><span style="color:#61AFEF;">Listable</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)                 </span><span style="color:#7F848E;font-style:italic;">// [0]</span></span>
<span class="line"><span style="color:#61AFEF;">Listable</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">])            </span><span style="color:#7F848E;font-style:italic;">// [1, 2]</span></span>
<span class="line"></span></code></pre></div><h3 id="alias" tabindex="-1"><a class="header-anchor" href="#alias" aria-hidden="true">#</a> Alias</h3><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Config</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dict</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">union</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transform</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;bar&#39;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">]))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">Config</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> })          </span><span style="color:#7F848E;font-style:italic;">// { foo: 1 }</span></span>
<span class="line"><span style="color:#61AFEF;">Config</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> })          </span><span style="color:#7F848E;font-style:italic;">// { foo: 2 }</span></span>
<span class="line"><span style="color:#61AFEF;">Config</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;3&#39;</span><span style="color:#ABB2BF;"> })        </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"></span></code></pre></div><h2 id="extensibility" tabindex="-1"><a class="header-anchor" href="#extensibility" aria-hidden="true">#</a> Extensibility</h2><h2 id="serializability" tabindex="-1"><a class="header-anchor" href="#serializability" aria-hidden="true">#</a> Serializability</h2><div class="language-javascript ext-js"><pre class="shiki" style="background-color:#282c34;"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">schema1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">object</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">string</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">number</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// should have the same effect as schema1</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">schema2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Schema</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#56B6C2;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#56B6C2;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">schema1</span><span style="color:#ABB2BF;">)))</span></span>
<span class="line"></span></code></pre></div>`,77);function C(f,v){const a=c("ExternalLinkIcon");return o(),p("div",null,[B,s("p",null,[s("a",y,[i,n(a)]),s("a",F,[A,n(a)]),s("a",d,[h,n(a)]),s("a",E,[u,n(a)])]),m])}var b=l(r,[["render",C],["__file","index.html.vue"]]);export{b as default};
